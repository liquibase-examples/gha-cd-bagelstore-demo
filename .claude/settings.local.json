{
  "permissions": {
    "allow": [
      "Read(//Users/recampbell/workspace/liquibase-patterns/docs/**)",
      "Read(//Users/recampbell/workspace/liquibase-patterns/repos/postgres-flow-policy-demo/**)",
      "Read(//Users/recampbell/workspace/liquibase-patterns/repos/Liquibase-workshop-repo/**)",
      "Read(//Users/recampbell/workspace/liquibase-patterns/repos/**)",
      "Bash(if [ -f \"README.md\" ])",
      "Bash(then cat README.md)",
      "Bash(else echo \"No README.md found\")",
      "Bash(fi)",
      "Bash(git init:*)",
      "Bash(git branch:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nPhase 1: Infrastructure Setup - Complete Terraform and Liquibase Flows\n\nComplete implementation of Phase 1 from requirements-design-plan.md.\n\nTerraform Infrastructure:\n- Multi-instance support via demo_id variable\n- RDS PostgreSQL with 4 databases (dev, test, staging, prod)\n- AWS Secrets Manager for credentials\n- S3 buckets for flow files (public) and reports (private)\n- App Runner services for all 4 environments\n- Route53 DNS records\n- Comprehensive outputs and documentation\n\nLiquibase Flows:\n- pr-validation-flow.yaml - PR validation with policy checks\n- main-deployment-flow.yaml - Main branch deployment with artifact creation\n- 12 policy checks configured at BLOCKER severity\n- Pattern based on postgres-flow-policy-demo\n\nKey Features:\n- All resources tagged with demo_id for multi-instance support\n- AWS Secrets Manager native integration\n- Operation reports uploaded to S3\n- Fixed instance count on App Runner (cost control)\n- Public RDS access (demo only)\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(aws sts get-caller-identity:*)",
      "Bash(aws configure:*)",
      "Read(//Users/recampbell/.aws/**)",
      "Bash(aws:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nMake Route53 DNS optional and improve Terraform usability\n\nEnhanced Terraform configuration to support deployments without Route53:\n- Made Route53 DNS optional via enable_route53 variable (defaults to false)\n- App Runner services always get default URLs, Route53 adds custom domains\n- Added terraform.tfvars.example template with comprehensive documentation\n- Improved tag consistency (Requestor instead of deployed_by)\n- Updated README with clearer prerequisites and AWS SSO guidance\n\nChanges:\n- variables.tf: Added enable_route53 flag, made domain_name/route53_zone_id optional\n- route53.tf: Conditionally create DNS records only if enable_route53 = true\n- outputs.tf: Show App Runner URLs when Route53 disabled\n- main.tf: Standardized tag names (Requestor, Account)\n- README.md: Document optional Route53, terraform.tfvars.example workflow\n- terraform.tfvars.example: Complete template with all variables documented\n\nThis enables quick demos without Route53 setup while preserving custom DNS capability.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(terraform:*)",
      "Bash(export AWS_PROFILE=liquibase-csteam-operator)",
      "Bash(AWS_PROFILE=liquibase-csteam-operator terraform apply)",
      "Bash(gh repo view:*)",
      "Bash(git log:*)",
      "Bash(cat:*)",
      "Bash(gh api:*)",
      "Bash(uv init:*)",
      "Bash(uv add:*)",
      "Bash(gh issue view:*)",
      "Bash(docker compose:*)",
      "Bash(lsof:*)",
      "Bash(xargs kill:*)",
      "Bash(if [ -f ~/.config/claude-code/settings.json ])",
      "Bash(then)",
      "Bash(elif [ -f ~/Library/Application Support/claude-code/settings.json ])",
      "Bash(else)",
      "Read(//Users/recampbell/Library/**)",
      "mcp__playwright__browser_navigate:*",
      "mcp__playwright__browser_snapshot:*",
      "mcp__playwright__browser_take_screenshot:*",
      "mcp__playwright__browser_click:*",
      "mcp__playwright__browser_type:*",
      "mcp__playwright__browser_fill_form:*",
      "mcp__playwright__browser_press_key:*",
      "mcp__playwright__browser_wait_for:*",
      "mcp__playwright__browser_evaluate:*",
      "mcp__playwright__browser_console_messages:*",
      "mcp__playwright__browser_network_requests:*",
      "mcp__playwright__browser_close:*",
      "mcp__playwright__browser_resize:*",
      "mcp__playwright__browser_select_option:*",
      "mcp__playwright__browser_hover:*",
      "mcp__playwright__browser_drag:*",
      "mcp__playwright__browser_handle_dialog:*",
      "mcp__playwright__browser_file_upload:*",
      "mcp__playwright__browser_tabs:*",
      "mcp__playwright__browser_navigate_back:*",
      "Bash(git push:*)",
      "Bash(uv run:*)",
      "Bash(curl:*)",
      "mcp__context7__resolve-library-id",
      "WebSearch",
      "WebFetch(domain:registry.terraform.io)",
      "WebFetch(domain:developer.harness.io)",
      "WebFetch(domain:revealjs.com)",
      "Bash(find:*)",
      "mcp__atlassian__search",
      "mcp__atlassian__getAccessibleAtlassianResources",
      "mcp__atlassian__atlassianUserInfo",
      "Bash(echo $AWS_PROFILE)",
      "Bash(AWS_PROFILE=liquibase-csteam-operator aws s3 ls)",
      "Bash(AWS_PROFILE=liquibase-csteam-operator aws dynamodb list-tables --region us-east-1)",
      "Bash(gh issue list:*)",
      "Bash(export AWS_PROFILE=liquibase-sandbox-admin)",
      "mcp__context7__get-library-docs",
      "Bash(git check-ignore:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(docker inspect:*)",
      "Bash(mkdir:*)",
      "Bash(git commit:*)",
      "Bash(git show:*)",
      "mcp__atlassian__getJiraIssue",
      "mcp__playwright__browser_navigate",
      "Bash(awk '{print $NF}')",
      "Bash(tree .harness/)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore log --oneline --all -20)",
      "Bash(source harness/.env)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore log --oneline --all -10 -- '.harness/*infra*')",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show 5da20c1 --stat)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show f18fc60:'.harness/orgs/default/projects/bagel_store_demo/infrastructure_definitions/psr_dev_infra.yaml')",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show f18fc60 --name-status)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show f18fc60:.harness/orgs/default/projects/bagel_store_demo/envs/PreProduction/psr_dev/infras/psr_dev_infra.yaml)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show f18fc60:.harness/orgs/default/projects/bagel_store_demo/envs/PreProduction/psr_test/infras/psr_test_infra.yaml)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show f18fc60:.harness/orgs/default/projects/bagel_store_demo/envs/PreProduction/psr_staging/infras/psr_staging_infra.yaml)",
      "Bash(git -C /Users/recampbell/workspace/harness-gha-bagelstore show f18fc60:.harness/orgs/default/projects/bagel_store_demo/envs/Production/psr_prod/infras/psr_prod_infra.yaml)",
      "Bash(xargs -I {} basename {})"
    ],
    "deny": [],
    "ask": []
  }
}
