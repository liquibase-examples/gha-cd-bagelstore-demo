name: Main CI - Build & Publish Artifacts

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'db/changelog/**'
      - 'liquibase-flows/**'
      - '.github/workflows/main-ci.yml'
  workflow_dispatch:

env:
  LIQUIBASE_VERSION: "5.0.1"

jobs:
  build-database-artifact:
    name: Build Database Changelog Artifact
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bagelstore
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for version tagging

      - name: Extract version from git
        id: version
        run: |
          # Try to get version from git tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # If no tag, use commit SHA
          if [ -z "$VERSION" ]; then
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Run Liquibase Main Deployment Flow
        env:
          LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_LICENSE_KEY }}
          VERSION: ${{ steps.version.outputs.version }}
          LIQUIBASE_COMMAND_URL: jdbc:postgresql://localhost:5432/bagelstore
          LIQUIBASE_COMMAND_USERNAME: postgres
          LIQUIBASE_COMMAND_PASSWORD: postgres
          LIQUIBASE_COMMAND_CHANGELOG_FILE: changelog-master.yaml
          LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE: /liquibase/flows/liquibase.checks-settings.conf
        run: |
          mkdir -p reports
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/db/changelog:/liquibase/changelog \
            -v ${{ github.workspace }}/liquibase-flows:/liquibase/flows \
            -v ${{ github.workspace }}/reports:/liquibase/reports \
            -e LIQUIBASE_LICENSE_KEY="${LIQUIBASE_LICENSE_KEY}" \
            -e VERSION="${VERSION}" \
            -e LIQUIBASE_COMMAND_URL="${LIQUIBASE_COMMAND_URL}" \
            -e LIQUIBASE_COMMAND_USERNAME="${LIQUIBASE_COMMAND_USERNAME}" \
            -e LIQUIBASE_COMMAND_PASSWORD="${LIQUIBASE_COMMAND_PASSWORD}" \
            -e LIQUIBASE_COMMAND_CHANGELOG_FILE="${LIQUIBASE_COMMAND_CHANGELOG_FILE}" \
            -e LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE="${LIQUIBASE_COMMAND_CHECKS_SETTINGS_FILE}" \
            -w /liquibase \
            liquibase/liquibase-secure:${{ env.LIQUIBASE_VERSION }} \
            flow \
            --flow-file=/liquibase/flows/main-deployment-flow.yaml

      - name: Create changelog artifact
        run: |
          mkdir -p artifacts
          cd db/changelog
          tar -czf ../../artifacts/bagel-store-changelog-${{ steps.version.outputs.version }}.tar.gz --exclude='.git*' .
          cd ../..
          echo "✅ Changelog artifact created successfully"
          ls -lh artifacts/bagel-store-changelog-${{ steps.version.outputs.version }}.tar.gz

      - name: Upload changelog artifact to GitHub Packages
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ steps.version.outputs.version }}
          path: artifacts/bagel-store-changelog-${{ steps.version.outputs.version }}.tar.gz
          retention-days: 90

      - name: Upload operation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: main-ci-reports-${{ github.run_number }}
          path: reports/*.html
          retention-days: 30

      - name: Generate workflow summary
        if: always()
        run: |
          echo "## 📦 Database Artifact Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Created" >> $GITHUB_STEP_SUMMARY
          echo "- \`bagel-store-changelog-${{ steps.version.outputs.version }}.zip\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Connection Report" >> $GITHUB_STEP_SUMMARY
          echo "- Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "- Status Report" >> $GITHUB_STEP_SUMMARY
          echo "- Policy Check Report" >> $GITHUB_STEP_SUMMARY

  build-app-image:
    name: Build & Push Application Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from git
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$VERSION" ]; then
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Extract demo_id from GitHub variables
        id: demo
        run: |
          # Try to get demo_id from GitHub variables, default to 'demo1'
          DEMO_ID="${{ vars.DEMO_ID }}"
          if [ -z "$DEMO_ID" ]; then
            DEMO_ID="demo1"
            echo "::warning::DEMO_ID variable not set, using default: demo1"
          fi
          echo "demo_id=$DEMO_ID" >> $GITHUB_OUTPUT
          echo "Using demo_id: $DEMO_ID"

      - name: Set ECR registry alias
        id: ecr_alias
        run: |
          # ECR registry alias from Terraform output (static value)
          # Can also be retrieved from: terraform output ecr_public_registry_alias
          ALIAS="l1v5b6d6"
          echo "alias=$ALIAS" >> $GITHUB_OUTPUT
          echo "Using ECR registry alias: $ALIAS"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to AWS Public ECR
        uses: docker/login-action@v3
        with:
          registry: public.ecr.aws

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: public.ecr.aws/${{ steps.ecr_alias.outputs.alias }}/${{ steps.demo.outputs.demo_id }}-bagel-store
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest
            type=sha,prefix=

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate image summary
        run: |
          echo "## 🐳 Docker Image Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Demo ID:** ${{ steps.demo.outputs.demo_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**ECR Alias:** ${{ steps.ecr_alias.outputs.alias }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Images" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull public.ecr.aws/${{ steps.ecr_alias.outputs.alias }}/${{ steps.demo.outputs.demo_id }}-bagel-store:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  trigger-harness-deployment:
    name: Trigger Harness CD Pipeline
    runs-on: ubuntu-latest
    needs: [build-database-artifact, build-app-image]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe --tags

      - name: Extract version
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$VERSION" ]; then
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Trigger Harness webhook
        if: vars.HARNESS_WEBHOOK_URL != ''
        run: |
          # Set deployment target from GitHub variable or default to 'aws'
          DEPLOYMENT_TARGET="${{ vars.DEPLOYMENT_TARGET }}"
          if [ -z "$DEPLOYMENT_TARGET" ]; then
            DEPLOYMENT_TARGET="aws"
          fi

          echo "Triggering Harness CD pipeline..."
          curl -X POST "${{ vars.HARNESS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"version\": \"${{ steps.version.outputs.version }}\",
              \"github_org\": \"${{ github.repository_owner }}\",
              \"deployment_target\": \"${DEPLOYMENT_TARGET}\",
              \"branch\": \"${{ github.ref_name }}\",
              \"commit_sha\": \"${{ github.sha }}\",
              \"commit_message\": $(echo '${{ github.event.head_commit.message }}' | jq -Rs .),
              \"triggered_by\": \"${{ github.actor }}\",
              \"run_id\": \"${{ github.run_id }}\"
            }"
          echo "✅ Harness deployment triggered"

      - name: Skip Harness trigger
        if: vars.HARNESS_WEBHOOK_URL == ''
        run: |
          echo "::warning::HARNESS_WEBHOOK_URL variable not configured"
          echo "Skipping Harness CD trigger. Configure the webhook URL to enable automatic deployments."

      - name: Generate deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Trigger" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ vars.HARNESS_WEBHOOK_URL }}" ]; then
            echo "✅ Harness CD pipeline triggered successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Harness webhook not configured - manual deployment required" >> $GITHUB_STEP_SUMMARY
          fi
